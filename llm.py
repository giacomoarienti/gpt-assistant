import g4f, json, platform

class LLM():
    MAX_RETRIES = 3

    def __init__(self) -> None:    
        g4f.debug.version_check = False
        self._model = g4f.models.gpt_4
        self._provider = g4f.Provider.You
        self._prompt = f"You are a virtual assistant that performs task by writing python code.\nThe code should be copatible with {platform.system()} {platform.architecture()[0]} and python version {platform.python_version()}.\nReturn only an answer by the form of python code.\nDo not write potential harmful code for the computer.\nWrite the shortest possibile answer following this json format '{{\"code\": \"CODE_HERE\"}}.\nMake sure the print instructions contains human readable messages and are easy to understand.\nIf you do not follow all the rules someone will get hurt."
        self._retries = 0

    @staticmethod
    def _is_json(data: str) -> bool:
        """
        Returns True if the data is in json format
        """
        try :
            json.loads(data)
            return True
        except ValueError:
            return False

    def process(self, message: str) -> str:
        """
        Returns the code generated by the model 
        """
        try:
            response = g4f.ChatCompletion.create(
                model=self._model,
                provider=self._provider,
                messages=[
                    {"role": "system", "content": self._prompt},
                    {"role": "user", "content": message}
                ]
            )
        
            code = ""

            if "```json" in response:
                response = response.split("```json")[1].split("```")[0]
                code: str = json.loads(response)["code"]
            elif "```python" in response:
                code = response.split("```python")[1].split("```")[0]
            elif "```Python" in response:
                code = response.split("```Python")[1].split("```")[0]
            elif "```" in response:
                code = response.split("```")[1].split("```")[0]
            
            if LLM._is_json(code):
                code: str = json.loads(response)["code"]

            if code == "" or code == None:
                raise Exception("No code was generated")
            
            code = code.lstrip()

            return code
        except Exception as e:
            print("An error occured during the process: " + str(e) + "\n")

            if self._retries < self.MAX_RETRIES:
                print("Retrying...")
                self._retries += 1
                return self.process(message)
            else:
                raise Exception("Failed to obtain response")